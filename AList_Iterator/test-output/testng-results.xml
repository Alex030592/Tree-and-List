<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" total="410" passed="410">
  <reporter-output>
  </reporter-output>
  <suite name="Default suite" duration-ms="1441" started-at="2016-07-27T16:24:34Z" finished-at="2016-07-27T16:24:36Z">
    <groups>
    </groups>
    <test name="Default test" duration-ms="1441" started-at="2016-07-27T16:24:34Z" finished-at="2016-07-27T16:24:36Z">
      <class name="Test.EListTest_NG">
        <test-method status="PASS" signature="test_addEnd_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addEnd_0" duration-ms="32" started-at="2016-07-27T19:24:34Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addEnd_0 -->
        <test-method status="PASS" signature="test_addEnd_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addEnd_0" duration-ms="4" started-at="2016-07-27T19:24:34Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addEnd_0 -->
        <test-method status="PASS" signature="test_addEnd_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addEnd_0" duration-ms="4" started-at="2016-07-27T19:24:34Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addEnd_0 -->
        <test-method status="PASS" signature="test_addEnd_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addEnd_0" duration-ms="2" started-at="2016-07-27T19:24:34Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addEnd_0 -->
        <test-method status="PASS" signature="test_addEnd_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addEnd_0" duration-ms="3" started-at="2016-07-27T19:24:34Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addEnd_0 -->
        <test-method status="PASS" signature="test_addEnd_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addEnd_1" duration-ms="1" started-at="2016-07-27T19:24:34Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addEnd_1 -->
        <test-method status="PASS" signature="test_addEnd_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addEnd_1" duration-ms="2" started-at="2016-07-27T19:24:34Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addEnd_1 -->
        <test-method status="PASS" signature="test_addEnd_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addEnd_1" duration-ms="4" started-at="2016-07-27T19:24:34Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addEnd_1 -->
        <test-method status="PASS" signature="test_addEnd_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addEnd_1" duration-ms="2" started-at="2016-07-27T19:24:34Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addEnd_1 -->
        <test-method status="PASS" signature="test_addEnd_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addEnd_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addEnd_1 -->
        <test-method status="PASS" signature="test_addEnd_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addEnd_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1,-5,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addEnd_2 -->
        <test-method status="PASS" signature="test_addEnd_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addEnd_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1,-5,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addEnd_2 -->
        <test-method status="PASS" signature="test_addEnd_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addEnd_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1,-5,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addEnd_2 -->
        <test-method status="PASS" signature="test_addEnd_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addEnd_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1,-5,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addEnd_2 -->
        <test-method status="PASS" signature="test_addEnd_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addEnd_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1,-5,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addEnd_2 -->
        <test-method status="PASS" signature="test_addEnd_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addEnd_many" duration-ms="2" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4,0,-5,100,-3,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addEnd_many -->
        <test-method status="PASS" signature="test_addEnd_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addEnd_many" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4,0,-5,100,-3,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addEnd_many -->
        <test-method status="PASS" signature="test_addEnd_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addEnd_many" duration-ms="4" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4,0,-5,100,-3,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addEnd_many -->
        <test-method status="PASS" signature="test_addEnd_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addEnd_many" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4,0,-5,100,-3,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addEnd_many -->
        <test-method status="PASS" signature="test_addEnd_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addEnd_many" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4,0,-5,100,-3,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addEnd_many -->
        <test-method status="PASS" signature="test_addPos_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addPos_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_0 -->
        <test-method status="PASS" signature="test_addPos_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addPos_0" duration-ms="2" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_0 -->
        <test-method status="PASS" signature="test_addPos_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addPos_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_0 -->
        <test-method status="PASS" signature="test_addPos_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addPos_0" duration-ms="4" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_0 -->
        <test-method status="PASS" signature="test_addPos_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addPos_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_0 -->
        <test-method status="PASS" signature="test_addPos_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addPos_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_1 -->
        <test-method status="PASS" signature="test_addPos_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addPos_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_1 -->
        <test-method status="PASS" signature="test_addPos_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addPos_1" duration-ms="2" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_1 -->
        <test-method status="PASS" signature="test_addPos_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addPos_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_1 -->
        <test-method status="PASS" signature="test_addPos_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addPos_1" duration-ms="2" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_1 -->
        <test-method status="PASS" signature="test_addPos_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addPos_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1,5,-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_2 -->
        <test-method status="PASS" signature="test_addPos_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addPos_2" duration-ms="3" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1,5,-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_2 -->
        <test-method status="PASS" signature="test_addPos_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addPos_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1,5,-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_2 -->
        <test-method status="PASS" signature="test_addPos_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addPos_2" duration-ms="2" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1,5,-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_2 -->
        <test-method status="PASS" signature="test_addPos_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addPos_2" duration-ms="2" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1,5,-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_2 -->
        <test-method status="PASS" signature="test_addPos_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addPos_many" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4,0,-5,5,100,-3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_many -->
        <test-method status="PASS" signature="test_addPos_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addPos_many" duration-ms="6" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4,0,-5,5,100,-3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_many -->
        <test-method status="PASS" signature="test_addPos_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addPos_many" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4,0,-5,5,100,-3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_many -->
        <test-method status="PASS" signature="test_addPos_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addPos_many" duration-ms="2" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4,0,-5,5,100,-3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_many -->
        <test-method status="PASS" signature="test_addPos_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addPos_many" duration-ms="2" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4,0,-5,5,100,-3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_many -->
        <test-method status="PASS" signature="test_addStart_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addStart_0" duration-ms="2" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addStart_0 -->
        <test-method status="PASS" signature="test_addStart_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addStart_0" duration-ms="4" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addStart_0 -->
        <test-method status="PASS" signature="test_addStart_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addStart_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addStart_0 -->
        <test-method status="PASS" signature="test_addStart_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addStart_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addStart_0 -->
        <test-method status="PASS" signature="test_addStart_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addStart_0" duration-ms="2" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addStart_0 -->
        <test-method status="PASS" signature="test_addStart_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addStart_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addStart_1 -->
        <test-method status="PASS" signature="test_addStart_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addStart_1" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addStart_1 -->
        <test-method status="PASS" signature="test_addStart_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addStart_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addStart_1 -->
        <test-method status="PASS" signature="test_addStart_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addStart_1" duration-ms="7" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addStart_1 -->
        <test-method status="PASS" signature="test_addStart_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addStart_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addStart_1 -->
        <test-method status="PASS" signature="test_addStart_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addStart_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,1,-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addStart_2 -->
        <test-method status="PASS" signature="test_addStart_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addStart_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,1,-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addStart_2 -->
        <test-method status="PASS" signature="test_addStart_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addStart_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,1,-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addStart_2 -->
        <test-method status="PASS" signature="test_addStart_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addStart_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,1,-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addStart_2 -->
        <test-method status="PASS" signature="test_addStart_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addStart_2" duration-ms="2" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,1,-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addStart_2 -->
        <test-method status="PASS" signature="test_addStart_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addStart_many" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,4,0,-5,100,-3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addStart_many -->
        <test-method status="PASS" signature="test_addStart_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addStart_many" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,4,0,-5,100,-3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addStart_many -->
        <test-method status="PASS" signature="test_addStart_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addStart_many" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,4,0,-5,100,-3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addStart_many -->
        <test-method status="PASS" signature="test_addStart_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addStart_many" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,4,0,-5,100,-3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addStart_many -->
        <test-method status="PASS" signature="test_addStart_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_addStart_many" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,4,0,-5,100,-3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addStart_many -->
        <test-method status="PASS" signature="test_clear_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_clear_0" duration-ms="2" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_clear_0 -->
        <test-method status="PASS" signature="test_clear_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_clear_0" duration-ms="2" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_clear_0 -->
        <test-method status="PASS" signature="test_clear_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_clear_0" duration-ms="7" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_clear_0 -->
        <test-method status="PASS" signature="test_clear_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_clear_0" duration-ms="2" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_clear_0 -->
        <test-method status="PASS" signature="test_clear_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_clear_0" duration-ms="2" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_clear_0 -->
        <test-method status="PASS" signature="test_clear_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_clear_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_clear_1 -->
        <test-method status="PASS" signature="test_clear_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_clear_1" duration-ms="4" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_clear_1 -->
        <test-method status="PASS" signature="test_clear_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_clear_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_clear_1 -->
        <test-method status="PASS" signature="test_clear_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_clear_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_clear_1 -->
        <test-method status="PASS" signature="test_clear_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_clear_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_clear_1 -->
        <test-method status="PASS" signature="test_clear_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_clear_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_clear_2 -->
        <test-method status="PASS" signature="test_clear_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_clear_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_clear_2 -->
        <test-method status="PASS" signature="test_clear_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_clear_2" duration-ms="2" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_clear_2 -->
        <test-method status="PASS" signature="test_clear_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_clear_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_clear_2 -->
        <test-method status="PASS" signature="test_clear_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_clear_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_clear_2 -->
        <test-method status="PASS" signature="test_clear_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_clear_many" duration-ms="2" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_clear_many -->
        <test-method status="PASS" signature="test_clear_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_clear_many" duration-ms="3" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_clear_many -->
        <test-method status="PASS" signature="test_clear_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_clear_many" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_clear_many -->
        <test-method status="PASS" signature="test_clear_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_clear_many" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_clear_many -->
        <test-method status="PASS" signature="test_clear_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_clear_many" duration-ms="2" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_clear_many -->
        <test-method status="PASS" signature="test_delEnd_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delEnd_0" duration-ms="3" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.AList0.delEnd(AList0.java:125)
	at Test.EListTest_NG.test_delEnd_0(EListTest_NG.java:440)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delEnd_0 -->
        <test-method status="PASS" signature="test_delEnd_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delEnd_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.AList1.delEnd(AList1.java:112)
	at Test.EListTest_NG.test_delEnd_0(EListTest_NG.java:440)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delEnd_0 -->
        <test-method status="PASS" signature="test_delEnd_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delEnd_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.AList2.delEnd(AList2.java:109)
	at Test.EListTest_NG.test_delEnd_0(EListTest_NG.java:440)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delEnd_0 -->
        <test-method status="PASS" signature="test_delEnd_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delEnd_0" duration-ms="3" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.LList1.delEnd(LList1.java:152)
	at Test.EListTest_NG.test_delEnd_0(EListTest_NG.java:440)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delEnd_0 -->
        <test-method status="PASS" signature="test_delEnd_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delEnd_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.LList2.delEnd(LList2.java:181)
	at Test.EListTest_NG.test_delEnd_0(EListTest_NG.java:440)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delEnd_0 -->
        <test-method status="PASS" signature="test_delEnd_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delEnd_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delEnd_1 -->
        <test-method status="PASS" signature="test_delEnd_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delEnd_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delEnd_1 -->
        <test-method status="PASS" signature="test_delEnd_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delEnd_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delEnd_1 -->
        <test-method status="PASS" signature="test_delEnd_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delEnd_1" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delEnd_1 -->
        <test-method status="PASS" signature="test_delEnd_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delEnd_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delEnd_1 -->
        <test-method status="PASS" signature="test_delEnd_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delEnd_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delEnd_2 -->
        <test-method status="PASS" signature="test_delEnd_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delEnd_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delEnd_2 -->
        <test-method status="PASS" signature="test_delEnd_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delEnd_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delEnd_2 -->
        <test-method status="PASS" signature="test_delEnd_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delEnd_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delEnd_2 -->
        <test-method status="PASS" signature="test_delEnd_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delEnd_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delEnd_2 -->
        <test-method status="PASS" signature="test_delEnd_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delEnd_many" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-10,0,65]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delEnd_many -->
        <test-method status="PASS" signature="test_delEnd_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delEnd_many" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-10,0,65]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delEnd_many -->
        <test-method status="PASS" signature="test_delEnd_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delEnd_many" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-10,0,65]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delEnd_many -->
        <test-method status="PASS" signature="test_delEnd_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delEnd_many" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-10,0,65]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delEnd_many -->
        <test-method status="PASS" signature="test_delEnd_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delEnd_many" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-10,0,65]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delEnd_many -->
        <test-method status="PASS" signature="test_delPos_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delPos_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.AList0.delPos(AList0.java:142)
	at Test.EListTest_NG.test_delPos_0(EListTest_NG.java:485)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delPos_0 -->
        <test-method status="PASS" signature="test_delPos_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delPos_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.AList1.delPos(AList1.java:123)
	at Test.EListTest_NG.test_delPos_0(EListTest_NG.java:485)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delPos_0 -->
        <test-method status="PASS" signature="test_delPos_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delPos_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.AList2.delPos(AList2.java:120)
	at Test.EListTest_NG.test_delPos_0(EListTest_NG.java:485)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delPos_0 -->
        <test-method status="PASS" signature="test_delPos_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delPos_0" duration-ms="2" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.LList1.delPos(LList1.java:178)
	at Test.EListTest_NG.test_delPos_0(EListTest_NG.java:485)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delPos_0 -->
        <test-method status="PASS" signature="test_delPos_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delPos_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.LList2.delPos(LList2.java:203)
	at Test.EListTest_NG.test_delPos_0(EListTest_NG.java:485)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delPos_0 -->
        <test-method status="PASS" signature="test_delPos_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delPos_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delPos_1 -->
        <test-method status="PASS" signature="test_delPos_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delPos_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delPos_1 -->
        <test-method status="PASS" signature="test_delPos_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delPos_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delPos_1 -->
        <test-method status="PASS" signature="test_delPos_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delPos_1" duration-ms="3" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delPos_1 -->
        <test-method status="PASS" signature="test_delPos_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delPos_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delPos_1 -->
        <test-method status="PASS" signature="test_delPos_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delPos_2" duration-ms="4" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delPos_2 -->
        <test-method status="PASS" signature="test_delPos_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delPos_2" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delPos_2 -->
        <test-method status="PASS" signature="test_delPos_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delPos_2" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delPos_2 -->
        <test-method status="PASS" signature="test_delPos_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delPos_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delPos_2 -->
        <test-method status="PASS" signature="test_delPos_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delPos_2" duration-ms="3" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delPos_2 -->
        <test-method status="PASS" signature="test_delPos_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delPos_many" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-10,0,-95]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delPos_many -->
        <test-method status="PASS" signature="test_delPos_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delPos_many" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-10,0,-95]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delPos_many -->
        <test-method status="PASS" signature="test_delPos_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delPos_many" duration-ms="4" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-10,0,-95]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delPos_many -->
        <test-method status="PASS" signature="test_delPos_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delPos_many" duration-ms="2" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-10,0,-95]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delPos_many -->
        <test-method status="PASS" signature="test_delPos_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delPos_many" duration-ms="2" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-10,0,-95]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delPos_many -->
        <test-method status="PASS" signature="test_delStart_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delStart_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.AList0.delStart(AList0.java:108)
	at Test.EListTest_NG.test_delStart_0(EListTest_NG.java:395)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delStart_0 -->
        <test-method status="PASS" signature="test_delStart_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delStart_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.AList1.delStart(AList1.java:94)
	at Test.EListTest_NG.test_delStart_0(EListTest_NG.java:395)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delStart_0 -->
        <test-method status="PASS" signature="test_delStart_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delStart_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.AList2.delStart(AList2.java:97)
	at Test.EListTest_NG.test_delStart_0(EListTest_NG.java:395)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delStart_0 -->
        <test-method status="PASS" signature="test_delStart_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delStart_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.LList1.delStart(LList1.java:138)
	at Test.EListTest_NG.test_delStart_0(EListTest_NG.java:395)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delStart_0 -->
        <test-method status="PASS" signature="test_delStart_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delStart_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.LList2.delStart(LList2.java:157)
	at Test.EListTest_NG.test_delStart_0(EListTest_NG.java:395)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delStart_0 -->
        <test-method status="PASS" signature="test_delStart_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delStart_1" duration-ms="9" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delStart_1 -->
        <test-method status="PASS" signature="test_delStart_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delStart_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delStart_1 -->
        <test-method status="PASS" signature="test_delStart_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delStart_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delStart_1 -->
        <test-method status="PASS" signature="test_delStart_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delStart_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delStart_1 -->
        <test-method status="PASS" signature="test_delStart_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delStart_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delStart_1 -->
        <test-method status="PASS" signature="test_delStart_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delStart_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delStart_2 -->
        <test-method status="PASS" signature="test_delStart_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delStart_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delStart_2 -->
        <test-method status="PASS" signature="test_delStart_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delStart_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delStart_2 -->
        <test-method status="PASS" signature="test_delStart_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delStart_2" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delStart_2 -->
        <test-method status="PASS" signature="test_delStart_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delStart_2" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delStart_2 -->
        <test-method status="PASS" signature="test_delStart_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delStart_many" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-10,0,65,-95]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delStart_many -->
        <test-method status="PASS" signature="test_delStart_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delStart_many" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-10,0,65,-95]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delStart_many -->
        <test-method status="PASS" signature="test_delStart_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delStart_many" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-10,0,65,-95]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delStart_many -->
        <test-method status="PASS" signature="test_delStart_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delStart_many" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-10,0,65,-95]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delStart_many -->
        <test-method status="PASS" signature="test_delStart_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_delStart_many" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-10,0,65,-95]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_delStart_many -->
        <test-method status="PASS" signature="test_get_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_get_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.AList0.get(AList0.java:267)
	at Test.EListTest_NG.test_get_0(EListTest_NG.java:809)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_get_0 -->
        <test-method status="PASS" signature="test_get_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_get_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.AList1.get(AList1.java:243)
	at Test.EListTest_NG.test_get_0(EListTest_NG.java:809)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_get_0 -->
        <test-method status="PASS" signature="test_get_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_get_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.AList2.get(AList2.java:240)
	at Test.EListTest_NG.test_get_0(EListTest_NG.java:809)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_get_0 -->
        <test-method status="PASS" signature="test_get_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_get_0" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.LList1.get(LList1.java:358)
	at Test.EListTest_NG.test_get_0(EListTest_NG.java:809)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_get_0 -->
        <test-method status="PASS" signature="test_get_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_get_0" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.LList2.get(LList2.java:388)
	at Test.EListTest_NG.test_get_0(EListTest_NG.java:809)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_get_0 -->
        <test-method status="PASS" signature="test_get_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_get_1" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_get_1 -->
        <test-method status="PASS" signature="test_get_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_get_1" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_get_1 -->
        <test-method status="PASS" signature="test_get_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_get_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_get_1 -->
        <test-method status="PASS" signature="test_get_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_get_1" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_get_1 -->
        <test-method status="PASS" signature="test_get_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_get_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_get_1 -->
        <test-method status="PASS" signature="test_get_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_get_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,-500]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_get_2 -->
        <test-method status="PASS" signature="test_get_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_get_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,-500]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_get_2 -->
        <test-method status="PASS" signature="test_get_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_get_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,-500]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_get_2 -->
        <test-method status="PASS" signature="test_get_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_get_2" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,-500]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_get_2 -->
        <test-method status="PASS" signature="test_get_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_get_2" duration-ms="2" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,-500]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_get_2 -->
        <test-method status="PASS" signature="test_get_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_get_many" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,0,-3,514,-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_get_many -->
        <test-method status="PASS" signature="test_get_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_get_many" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,0,-3,514,-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_get_many -->
        <test-method status="PASS" signature="test_get_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_get_many" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,0,-3,514,-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_get_many -->
        <test-method status="PASS" signature="test_get_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_get_many" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,0,-3,514,-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_get_many -->
        <test-method status="PASS" signature="test_get_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_get_many" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,0,-3,514,-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_get_many -->
        <test-method status="PASS" signature="test_halfreverse_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_halfreverse_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfreverse_0 -->
        <test-method status="PASS" signature="test_halfreverse_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_halfreverse_0" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfreverse_0 -->
        <test-method status="PASS" signature="test_halfreverse_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_halfreverse_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfreverse_0 -->
        <test-method status="PASS" signature="test_halfreverse_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_halfreverse_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfreverse_0 -->
        <test-method status="PASS" signature="test_halfreverse_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_halfreverse_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfreverse_0 -->
        <test-method status="PASS" signature="test_halfreverse_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_halfreverse_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfreverse_1 -->
        <test-method status="PASS" signature="test_halfreverse_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_halfreverse_1" duration-ms="6" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfreverse_1 -->
        <test-method status="PASS" signature="test_halfreverse_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_halfreverse_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfreverse_1 -->
        <test-method status="PASS" signature="test_halfreverse_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_halfreverse_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfreverse_1 -->
        <test-method status="PASS" signature="test_halfreverse_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_halfreverse_1" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfreverse_1 -->
        <test-method status="PASS" signature="test_halfreverse_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_halfreverse_2" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-5,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfreverse_2 -->
        <test-method status="PASS" signature="test_halfreverse_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_halfreverse_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-5,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfreverse_2 -->
        <test-method status="PASS" signature="test_halfreverse_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_halfreverse_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-5,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfreverse_2 -->
        <test-method status="PASS" signature="test_halfreverse_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_halfreverse_2" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-5,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfreverse_2 -->
        <test-method status="PASS" signature="test_halfreverse_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_halfreverse_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-5,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfreverse_2 -->
        <test-method status="PASS" signature="test_halfreverse_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_halfreverse_many" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[95,-65,0,5,-10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfreverse_many -->
        <test-method status="PASS" signature="test_halfreverse_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_halfreverse_many" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[95,-65,0,5,-10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfreverse_many -->
        <test-method status="PASS" signature="test_halfreverse_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_halfreverse_many" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[95,-65,0,5,-10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfreverse_many -->
        <test-method status="PASS" signature="test_halfreverse_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_halfreverse_many" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[95,-65,0,5,-10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfreverse_many -->
        <test-method status="PASS" signature="test_halfreverse_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_halfreverse_many" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[95,-65,0,5,-10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfreverse_many -->
        <test-method status="PASS" signature="test_init_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_init_0" duration-ms="2" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_0 -->
        <test-method status="PASS" signature="test_init_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_init_0" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_0 -->
        <test-method status="PASS" signature="test_init_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_init_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_0 -->
        <test-method status="PASS" signature="test_init_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_init_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_0 -->
        <test-method status="PASS" signature="test_init_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_init_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_0 -->
        <test-method status="PASS" signature="test_init_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_init_1" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_1 -->
        <test-method status="PASS" signature="test_init_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_init_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_1 -->
        <test-method status="PASS" signature="test_init_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_init_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_1 -->
        <test-method status="PASS" signature="test_init_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_init_1" duration-ms="3" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_1 -->
        <test-method status="PASS" signature="test_init_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_init_1" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_1 -->
        <test-method status="PASS" signature="test_init_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_init_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_2 -->
        <test-method status="PASS" signature="test_init_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_init_2" duration-ms="2" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_2 -->
        <test-method status="PASS" signature="test_init_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_init_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_2 -->
        <test-method status="PASS" signature="test_init_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_init_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_2 -->
        <test-method status="PASS" signature="test_init_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_init_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_2 -->
        <test-method status="PASS" signature="test_init_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_init_many" duration-ms="44" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-10,0,95,-65]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_many -->
        <test-method status="PASS" signature="test_init_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_init_many" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-10,0,95,-65]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_many -->
        <test-method status="PASS" signature="test_init_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_init_many" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-10,0,95,-65]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_many -->
        <test-method status="PASS" signature="test_init_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_init_many" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-10,0,95,-65]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_many -->
        <test-method status="PASS" signature="test_init_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_init_many" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-10,0,95,-65]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_many -->
        <test-method status="PASS" signature="test_init_null(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_init_null" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_null -->
        <test-method status="PASS" signature="test_init_null(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_init_null" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_null -->
        <test-method status="PASS" signature="test_init_null(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_init_null" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_null -->
        <test-method status="PASS" signature="test_init_null(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_init_null" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_null -->
        <test-method status="PASS" signature="test_init_null(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_init_null" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_null -->
        <test-method status="PASS" signature="test_maxPos_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_maxPos_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.AList0.maxPos(AList0.java:195)
	at Test.EListTest_NG.test_maxPos_0(EListTest_NG.java:638)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_maxPos_0 -->
        <test-method status="PASS" signature="test_maxPos_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_maxPos_0" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.AList1.maxPos(AList1.java:171)
	at Test.EListTest_NG.test_maxPos_0(EListTest_NG.java:638)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_maxPos_0 -->
        <test-method status="PASS" signature="test_maxPos_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_maxPos_0" duration-ms="2" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.AList2.maxPos(AList2.java:168)
	at Test.EListTest_NG.test_maxPos_0(EListTest_NG.java:638)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_maxPos_0 -->
        <test-method status="PASS" signature="test_maxPos_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_maxPos_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.LList1.maxPos(LList1.java:269)
	at Test.EListTest_NG.test_maxPos_0(EListTest_NG.java:638)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_maxPos_0 -->
        <test-method status="PASS" signature="test_maxPos_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_maxPos_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.LList2.maxPos(LList2.java:304)
	at Test.EListTest_NG.test_maxPos_0(EListTest_NG.java:638)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_maxPos_0 -->
        <test-method status="PASS" signature="test_maxPos_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_maxPos_1" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_maxPos_1 -->
        <test-method status="PASS" signature="test_maxPos_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_maxPos_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_maxPos_1 -->
        <test-method status="PASS" signature="test_maxPos_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_maxPos_1" duration-ms="5" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_maxPos_1 -->
        <test-method status="PASS" signature="test_maxPos_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_maxPos_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_maxPos_1 -->
        <test-method status="PASS" signature="test_maxPos_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_maxPos_1" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_maxPos_1 -->
        <test-method status="PASS" signature="test_maxPos_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_maxPos_2" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,-500]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_maxPos_2 -->
        <test-method status="PASS" signature="test_maxPos_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_maxPos_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,-500]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_maxPos_2 -->
        <test-method status="PASS" signature="test_maxPos_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_maxPos_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,-500]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_maxPos_2 -->
        <test-method status="PASS" signature="test_maxPos_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_maxPos_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,-500]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_maxPos_2 -->
        <test-method status="PASS" signature="test_maxPos_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_maxPos_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,-500]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_maxPos_2 -->
        <test-method status="PASS" signature="test_maxPos_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_maxPos_many" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,0,-3,514,-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_maxPos_many -->
        <test-method status="PASS" signature="test_maxPos_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_maxPos_many" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,0,-3,514,-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_maxPos_many -->
        <test-method status="PASS" signature="test_maxPos_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_maxPos_many" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,0,-3,514,-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_maxPos_many -->
        <test-method status="PASS" signature="test_maxPos_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_maxPos_many" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,0,-3,514,-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_maxPos_many -->
        <test-method status="PASS" signature="test_maxPos_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_maxPos_many" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,0,-3,514,-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_maxPos_many -->
        <test-method status="PASS" signature="test_max_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_max_0" duration-ms="3" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.AList0.maxPos(AList0.java:195)
	at Task.AList0.max(AList0.java:167)
	at Test.EListTest_NG.test_max_0(EListTest_NG.java:566)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_max_0 -->
        <test-method status="PASS" signature="test_max_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_max_0" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.AList1.maxPos(AList1.java:171)
	at Task.AList1.max(AList1.java:143)
	at Test.EListTest_NG.test_max_0(EListTest_NG.java:566)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_max_0 -->
        <test-method status="PASS" signature="test_max_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_max_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.AList2.maxPos(AList2.java:168)
	at Task.AList2.max(AList2.java:140)
	at Test.EListTest_NG.test_max_0(EListTest_NG.java:566)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_max_0 -->
        <test-method status="PASS" signature="test_max_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_max_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.LList1.max(LList1.java:225)
	at Test.EListTest_NG.test_max_0(EListTest_NG.java:566)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_max_0 -->
        <test-method status="PASS" signature="test_max_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_max_0" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.LList2.max(LList2.java:260)
	at Test.EListTest_NG.test_max_0(EListTest_NG.java:566)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_max_0 -->
        <test-method status="PASS" signature="test_max_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_max_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_max_1 -->
        <test-method status="PASS" signature="test_max_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_max_1" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_max_1 -->
        <test-method status="PASS" signature="test_max_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_max_1" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_max_1 -->
        <test-method status="PASS" signature="test_max_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_max_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_max_1 -->
        <test-method status="PASS" signature="test_max_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_max_1" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_max_1 -->
        <test-method status="PASS" signature="test_max_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_max_2" duration-ms="3" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,-500]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_max_2 -->
        <test-method status="PASS" signature="test_max_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_max_2" duration-ms="10" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,-500]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_max_2 -->
        <test-method status="PASS" signature="test_max_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_max_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,-500]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_max_2 -->
        <test-method status="PASS" signature="test_max_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_max_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,-500]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_max_2 -->
        <test-method status="PASS" signature="test_max_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_max_2" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,-500]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_max_2 -->
        <test-method status="PASS" signature="test_max_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_max_many" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,0,-3,514,-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_max_many -->
        <test-method status="PASS" signature="test_max_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_max_many" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,0,-3,514,-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_max_many -->
        <test-method status="PASS" signature="test_max_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_max_many" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,0,-3,514,-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_max_many -->
        <test-method status="PASS" signature="test_max_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_max_many" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,0,-3,514,-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_max_many -->
        <test-method status="PASS" signature="test_max_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_max_many" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,0,-3,514,-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_max_many -->
        <test-method status="PASS" signature="test_minPos_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_minPos_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.AList0.minPos(AList0.java:175)
	at Test.EListTest_NG.test_minPos_0(EListTest_NG.java:602)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_minPos_0 -->
        <test-method status="PASS" signature="test_minPos_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_minPos_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.AList1.minPos(AList1.java:151)
	at Test.EListTest_NG.test_minPos_0(EListTest_NG.java:602)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_minPos_0 -->
        <test-method status="PASS" signature="test_minPos_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_minPos_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.AList2.minPos(AList2.java:148)
	at Test.EListTest_NG.test_minPos_0(EListTest_NG.java:602)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_minPos_0 -->
        <test-method status="PASS" signature="test_minPos_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_minPos_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.LList1.minPos(LList1.java:246)
	at Test.EListTest_NG.test_minPos_0(EListTest_NG.java:602)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_minPos_0 -->
        <test-method status="PASS" signature="test_minPos_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_minPos_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.LList2.minPos(LList2.java:281)
	at Test.EListTest_NG.test_minPos_0(EListTest_NG.java:602)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_minPos_0 -->
        <test-method status="PASS" signature="test_minPos_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_minPos_1" duration-ms="2" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_minPos_1 -->
        <test-method status="PASS" signature="test_minPos_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_minPos_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_minPos_1 -->
        <test-method status="PASS" signature="test_minPos_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_minPos_1" duration-ms="3" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_minPos_1 -->
        <test-method status="PASS" signature="test_minPos_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_minPos_1" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_minPos_1 -->
        <test-method status="PASS" signature="test_minPos_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_minPos_1" duration-ms="24" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_minPos_1 -->
        <test-method status="PASS" signature="test_minPos_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_minPos_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,-500]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_minPos_2 -->
        <test-method status="PASS" signature="test_minPos_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_minPos_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,-500]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_minPos_2 -->
        <test-method status="PASS" signature="test_minPos_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_minPos_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,-500]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_minPos_2 -->
        <test-method status="PASS" signature="test_minPos_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_minPos_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,-500]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_minPos_2 -->
        <test-method status="PASS" signature="test_minPos_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_minPos_2" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,-500]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_minPos_2 -->
        <test-method status="PASS" signature="test_minPos_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_minPos_many" duration-ms="3" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,0,-3,514,-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_minPos_many -->
        <test-method status="PASS" signature="test_minPos_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_minPos_many" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,0,-3,514,-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_minPos_many -->
        <test-method status="PASS" signature="test_minPos_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_minPos_many" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,0,-3,514,-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_minPos_many -->
        <test-method status="PASS" signature="test_minPos_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_minPos_many" duration-ms="2" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,0,-3,514,-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_minPos_many -->
        <test-method status="PASS" signature="test_minPos_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_minPos_many" duration-ms="3" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,0,-3,514,-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_minPos_many -->
        <test-method status="PASS" signature="test_min_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_min_0" duration-ms="4" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.AList0.minPos(AList0.java:175)
	at Task.AList0.min(AList0.java:161)
	at Test.EListTest_NG.test_min_0(EListTest_NG.java:530)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_min_0 -->
        <test-method status="PASS" signature="test_min_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_min_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.AList1.minPos(AList1.java:151)
	at Task.AList1.min(AList1.java:137)
	at Test.EListTest_NG.test_min_0(EListTest_NG.java:530)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_min_0 -->
        <test-method status="PASS" signature="test_min_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_min_0" duration-ms="0" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.AList2.minPos(AList2.java:148)
	at Task.AList2.min(AList2.java:134)
	at Test.EListTest_NG.test_min_0(EListTest_NG.java:530)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_min_0 -->
        <test-method status="PASS" signature="test_min_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_min_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.LList1.min(LList1.java:204)
	at Test.EListTest_NG.test_min_0(EListTest_NG.java:530)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_min_0 -->
        <test-method status="PASS" signature="test_min_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_min_0" duration-ms="1" started-at="2016-07-27T19:24:35Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.LList2.min(LList2.java:239)
	at Test.EListTest_NG.test_min_0(EListTest_NG.java:530)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_min_0 -->
        <test-method status="PASS" signature="test_min_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_min_1" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_min_1 -->
        <test-method status="PASS" signature="test_min_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_min_1" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_min_1 -->
        <test-method status="PASS" signature="test_min_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_min_1" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_min_1 -->
        <test-method status="PASS" signature="test_min_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_min_1" duration-ms="2" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_min_1 -->
        <test-method status="PASS" signature="test_min_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_min_1" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_min_1 -->
        <test-method status="PASS" signature="test_min_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_min_2" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,-500]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_min_2 -->
        <test-method status="PASS" signature="test_min_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_min_2" duration-ms="2" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,-500]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_min_2 -->
        <test-method status="PASS" signature="test_min_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_min_2" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,-500]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_min_2 -->
        <test-method status="PASS" signature="test_min_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_min_2" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,-500]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_min_2 -->
        <test-method status="PASS" signature="test_min_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_min_2" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,-500]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_min_2 -->
        <test-method status="PASS" signature="test_min_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_min_many" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,0,-3,514,-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_min_many -->
        <test-method status="PASS" signature="test_min_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_min_many" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,0,-3,514,-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_min_many -->
        <test-method status="PASS" signature="test_min_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_min_many" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,0,-3,514,-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_min_many -->
        <test-method status="PASS" signature="test_min_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_min_many" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,0,-3,514,-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_min_many -->
        <test-method status="PASS" signature="test_min_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_min_many" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,0,-3,514,-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_min_many -->
        <test-method status="PASS" signature="test_reverse_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_reverse_0" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_reverse_0 -->
        <test-method status="PASS" signature="test_reverse_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_reverse_0" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_reverse_0 -->
        <test-method status="PASS" signature="test_reverse_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_reverse_0" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_reverse_0 -->
        <test-method status="PASS" signature="test_reverse_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_reverse_0" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_reverse_0 -->
        <test-method status="PASS" signature="test_reverse_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_reverse_0" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_reverse_0 -->
        <test-method status="PASS" signature="test_reverse_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_reverse_1" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_reverse_1 -->
        <test-method status="PASS" signature="test_reverse_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_reverse_1" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_reverse_1 -->
        <test-method status="PASS" signature="test_reverse_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_reverse_1" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_reverse_1 -->
        <test-method status="PASS" signature="test_reverse_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_reverse_1" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_reverse_1 -->
        <test-method status="PASS" signature="test_reverse_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_reverse_1" duration-ms="2" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_reverse_1 -->
        <test-method status="PASS" signature="test_reverse_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_reverse_2" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-5,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_reverse_2 -->
        <test-method status="PASS" signature="test_reverse_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_reverse_2" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-5,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_reverse_2 -->
        <test-method status="PASS" signature="test_reverse_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_reverse_2" duration-ms="3" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-5,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_reverse_2 -->
        <test-method status="PASS" signature="test_reverse_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_reverse_2" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-5,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_reverse_2 -->
        <test-method status="PASS" signature="test_reverse_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_reverse_2" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-5,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_reverse_2 -->
        <test-method status="PASS" signature="test_reverse_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_reverse_many" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-65,95,0,-10,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_reverse_many -->
        <test-method status="PASS" signature="test_reverse_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_reverse_many" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-65,95,0,-10,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_reverse_many -->
        <test-method status="PASS" signature="test_reverse_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_reverse_many" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-65,95,0,-10,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_reverse_many -->
        <test-method status="PASS" signature="test_reverse_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_reverse_many" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-65,95,0,-10,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_reverse_many -->
        <test-method status="PASS" signature="test_reverse_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_reverse_many" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-65,95,0,-10,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_reverse_many -->
        <test-method status="PASS" signature="test_set_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_set_0" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.AList0.set(AList0.java:277)
	at Test.EListTest_NG.test_set_0(EListTest_NG.java:845)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_set_0 -->
        <test-method status="PASS" signature="test_set_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_set_0" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.AList1.set(AList1.java:253)
	at Test.EListTest_NG.test_set_0(EListTest_NG.java:845)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_set_0 -->
        <test-method status="PASS" signature="test_set_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_set_0" duration-ms="2" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.AList2.set(AList2.java:250)
	at Test.EListTest_NG.test_set_0(EListTest_NG.java:845)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_set_0 -->
        <test-method status="PASS" signature="test_set_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_set_0" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.LList1.set(LList1.java:377)
	at Test.EListTest_NG.test_set_0(EListTest_NG.java:845)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_set_0 -->
        <test-method status="PASS" signature="test_set_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_set_0" duration-ms="2" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Task.LList2.set(LList2.java:404)
	at Test.EListTest_NG.test_set_0(EListTest_NG.java:845)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_set_0 -->
        <test-method status="PASS" signature="test_set_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_set_1" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_set_1 -->
        <test-method status="PASS" signature="test_set_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_set_1" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_set_1 -->
        <test-method status="PASS" signature="test_set_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_set_1" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_set_1 -->
        <test-method status="PASS" signature="test_set_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_set_1" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_set_1 -->
        <test-method status="PASS" signature="test_set_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_set_1" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_set_1 -->
        <test-method status="PASS" signature="test_set_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_set_2" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_set_2 -->
        <test-method status="PASS" signature="test_set_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_set_2" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_set_2 -->
        <test-method status="PASS" signature="test_set_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_set_2" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_set_2 -->
        <test-method status="PASS" signature="test_set_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_set_2" duration-ms="4" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_set_2 -->
        <test-method status="PASS" signature="test_set_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_set_2" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_set_2 -->
        <test-method status="PASS" signature="test_set_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_set_many" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,0,25,5,-2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_set_many -->
        <test-method status="PASS" signature="test_set_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_set_many" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,0,25,5,-2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_set_many -->
        <test-method status="PASS" signature="test_set_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_set_many" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,0,25,5,-2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_set_many -->
        <test-method status="PASS" signature="test_set_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_set_many" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,0,25,5,-2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_set_many -->
        <test-method status="PASS" signature="test_set_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_set_many" duration-ms="5" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,0,25,5,-2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_set_many -->
        <test-method status="PASS" signature="test_size_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_size_0" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_size_0 -->
        <test-method status="PASS" signature="test_size_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_size_0" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_size_0 -->
        <test-method status="PASS" signature="test_size_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_size_0" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_size_0 -->
        <test-method status="PASS" signature="test_size_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_size_0" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_size_0 -->
        <test-method status="PASS" signature="test_size_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_size_0" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_size_0 -->
        <test-method status="PASS" signature="test_size_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_size_1" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_size_1 -->
        <test-method status="PASS" signature="test_size_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_size_1" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_size_1 -->
        <test-method status="PASS" signature="test_size_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_size_1" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_size_1 -->
        <test-method status="PASS" signature="test_size_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_size_1" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_size_1 -->
        <test-method status="PASS" signature="test_size_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_size_1" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_size_1 -->
        <test-method status="PASS" signature="test_size_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_size_2" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1,-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_size_2 -->
        <test-method status="PASS" signature="test_size_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_size_2" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1,-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_size_2 -->
        <test-method status="PASS" signature="test_size_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_size_2" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1,-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_size_2 -->
        <test-method status="PASS" signature="test_size_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_size_2" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1,-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_size_2 -->
        <test-method status="PASS" signature="test_size_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_size_2" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1,-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_size_2 -->
        <test-method status="PASS" signature="test_size_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_size_many" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-5,0,51,-64,1000]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_size_many -->
        <test-method status="PASS" signature="test_size_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_size_many" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-5,0,51,-64,1000]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_size_many -->
        <test-method status="PASS" signature="test_size_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_size_many" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-5,0,51,-64,1000]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_size_many -->
        <test-method status="PASS" signature="test_size_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_size_many" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-5,0,51,-64,1000]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_size_many -->
        <test-method status="PASS" signature="test_size_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_size_many" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-5,0,51,-64,1000]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_size_many -->
        <test-method status="PASS" signature="test_sort_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_sort_0" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sort_0 -->
        <test-method status="PASS" signature="test_sort_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_sort_0" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sort_0 -->
        <test-method status="PASS" signature="test_sort_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_sort_0" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sort_0 -->
        <test-method status="PASS" signature="test_sort_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_sort_0" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sort_0 -->
        <test-method status="PASS" signature="test_sort_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_sort_0" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sort_0 -->
        <test-method status="PASS" signature="test_sort_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_sort_1" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sort_1 -->
        <test-method status="PASS" signature="test_sort_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_sort_1" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sort_1 -->
        <test-method status="PASS" signature="test_sort_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_sort_1" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sort_1 -->
        <test-method status="PASS" signature="test_sort_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_sort_1" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sort_1 -->
        <test-method status="PASS" signature="test_sort_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_sort_1" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sort_1 -->
        <test-method status="PASS" signature="test_sort_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_sort_2" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-5,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sort_2 -->
        <test-method status="PASS" signature="test_sort_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_sort_2" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-5,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sort_2 -->
        <test-method status="PASS" signature="test_sort_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_sort_2" duration-ms="6" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-5,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sort_2 -->
        <test-method status="PASS" signature="test_sort_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_sort_2" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-5,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sort_2 -->
        <test-method status="PASS" signature="test_sort_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_sort_2" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-5,5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sort_2 -->
        <test-method status="PASS" signature="test_sort_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_sort_many" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-65,-10,0,5,95]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sort_many -->
        <test-method status="PASS" signature="test_sort_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_sort_many" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-65,-10,0,5,95]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sort_many -->
        <test-method status="PASS" signature="test_sort_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_sort_many" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-65,-10,0,5,95]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sort_many -->
        <test-method status="PASS" signature="test_sort_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_sort_many" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-65,-10,0,5,95]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sort_many -->
        <test-method status="PASS" signature="test_sort_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_sort_many" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-65,-10,0,5,95]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sort_many -->
        <test-method status="PASS" signature="test_toArray_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toArray_0" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_0 -->
        <test-method status="PASS" signature="test_toArray_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toArray_0" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_0 -->
        <test-method status="PASS" signature="test_toArray_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toArray_0" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_0 -->
        <test-method status="PASS" signature="test_toArray_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toArray_0" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_0 -->
        <test-method status="PASS" signature="test_toArray_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toArray_0" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_0 -->
        <test-method status="PASS" signature="test_toArray_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toArray_1" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_1 -->
        <test-method status="PASS" signature="test_toArray_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toArray_1" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_1 -->
        <test-method status="PASS" signature="test_toArray_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toArray_1" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_1 -->
        <test-method status="PASS" signature="test_toArray_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toArray_1" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_1 -->
        <test-method status="PASS" signature="test_toArray_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toArray_1" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_1 -->
        <test-method status="PASS" signature="test_toArray_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toArray_2" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_2 -->
        <test-method status="PASS" signature="test_toArray_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toArray_2" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_2 -->
        <test-method status="PASS" signature="test_toArray_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toArray_2" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_2 -->
        <test-method status="PASS" signature="test_toArray_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toArray_2" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_2 -->
        <test-method status="PASS" signature="test_toArray_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toArray_2" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_2 -->
        <test-method status="PASS" signature="test_toArray_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toArray_many" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-10,0,95,-65]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_many -->
        <test-method status="PASS" signature="test_toArray_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toArray_many" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-10,0,95,-65]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_many -->
        <test-method status="PASS" signature="test_toArray_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toArray_many" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-10,0,95,-65]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_many -->
        <test-method status="PASS" signature="test_toArray_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toArray_many" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-10,0,95,-65]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_many -->
        <test-method status="PASS" signature="test_toArray_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toArray_many" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-10,0,95,-65]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_many -->
        <test-method status="PASS" signature="test_toArray_null(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toArray_null" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_null -->
        <test-method status="PASS" signature="test_toArray_null(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toArray_null" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_null -->
        <test-method status="PASS" signature="test_toArray_null(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toArray_null" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_null -->
        <test-method status="PASS" signature="test_toArray_null(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toArray_null" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_null -->
        <test-method status="PASS" signature="test_toArray_null(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toArray_null" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_null -->
        <test-method status="PASS" signature="test_toString_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toString_0" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toString_0 -->
        <test-method status="PASS" signature="test_toString_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toString_0" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toString_0 -->
        <test-method status="PASS" signature="test_toString_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toString_0" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toString_0 -->
        <test-method status="PASS" signature="test_toString_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toString_0" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toString_0 -->
        <test-method status="PASS" signature="test_toString_0(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toString_0" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toString_0 -->
        <test-method status="PASS" signature="test_toString_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toString_1" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toString_1 -->
        <test-method status="PASS" signature="test_toString_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toString_1" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toString_1 -->
        <test-method status="PASS" signature="test_toString_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toString_1" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toString_1 -->
        <test-method status="PASS" signature="test_toString_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toString_1" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toString_1 -->
        <test-method status="PASS" signature="test_toString_1(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toString_1" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toString_1 -->
        <test-method status="PASS" signature="test_toString_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toString_2" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toString_2 -->
        <test-method status="PASS" signature="test_toString_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toString_2" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toString_2 -->
        <test-method status="PASS" signature="test_toString_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toString_2" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toString_2 -->
        <test-method status="PASS" signature="test_toString_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toString_2" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toString_2 -->
        <test-method status="PASS" signature="test_toString_2(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toString_2" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toString_2 -->
        <test-method status="PASS" signature="test_toString_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toString_many" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-10,0,95,-65]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toString_many -->
        <test-method status="PASS" signature="test_toString_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toString_many" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-10,0,95,-65]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toString_many -->
        <test-method status="PASS" signature="test_toString_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toString_many" duration-ms="1" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-10,0,95,-65]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toString_many -->
        <test-method status="PASS" signature="test_toString_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toString_many" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-10,0,95,-65]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toString_many -->
        <test-method status="PASS" signature="test_toString_many(Task.EList)[pri:0, instance:Test.EListTest_NG@6d78f375]" name="test_toString_many" duration-ms="0" started-at="2016-07-27T19:24:36Z" data-provider="parameterTest" finished-at="2016-07-27T19:24:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5,-10,0,95,-65]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toString_many -->
      </class> <!-- Test.EListTest_NG -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
